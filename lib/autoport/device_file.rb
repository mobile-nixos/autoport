module Autoport
  # Outputs a skeleton default.nix with some values filled-in
  class DeviceFile
    TODO = "TODO!"

    def initialize(
      bootimg:,
      full_codename:,
      soc:,
      manufacturer:,
      model:,
      has_vendor_partition:
    )
      @bootimg = bootimg
      @full_codename = full_codename
      @soc = soc
      @manufacturer = manufacturer
      @model = model
      @has_vendor_partition = has_vendor_partition
    end

    def hex(num)
      "0x" + Integer(num).to_s(16).rjust(8, "0")
    end

    def number(num)
      Integer(num).to_s()
    end

    def kernel_cmdline()
      @bootimg.cmdline.split(" ")
    end

    def usb_mode()
      if File.read(@bootimg.kernel.config_file).lines.grep(/CONFIG_USB_G_ANDROID=y/).first
        "android_usb"
      else
        "gadgetfs"
      end
    end

    def get_contents()
<<EOF
{ pkgs, ... }:

/*
 * This file has been generated by autoport.
 * **Do not** open a Pull Request without having verified the port works.
 */
{
  mobile.device.name = "#{@full_codename}";
  mobile.device.identity = {
    name = "#{@model}";
    manufacturer = "#{@manufacturer}";
  };

  mobile.hardware = {
    soc = "#{@soc}";
    ram = 1024 * 0/* (in MB) To be filled by the user */;
    screen = {
      width = 0/* To be filled by the user */; height = 0/* To be filled by the user */;
    };
  };

  mobile.boot.stage-1 = {
    kernel.package = pkgs.callPackage ./kernel { kernelPatches = pkgs.defaultKernelPatches; };
  };

  mobile.system.android = {
    /* To be filled by the user; couldn't detect for A/B scheme or not */
    # This device has an A/B partition scheme
    ab_partitions = false/* true / false */;

    bootimg.flash = {
      offset_base = "#{hex(@bootimg.base)}";
      offset_kernel = "#{hex(@bootimg.kernel_offset)}";
      offset_ramdisk = "#{hex(@bootimg.ramdisk_offset)}";
      offset_second = "#{hex(@bootimg.second_offset)}";
      offset_tags = "#{hex(@bootimg.tags_offset)}";
      pagesize = "#{number(@bootimg.pagesize)}";
    };
  };

#{
  if @has_vendor_partition
<<EOS
  /* If your device has A/B partitions, the partition label is "vendor_a". */
  mobile.system.vendor.partition = "/dev/disk/by-partlabel/vendor_a";
EOS
  else "" end
}

  boot.kernelParams = [
    # Extracted from an Android boot image
#{kernel_cmdline.map { |arg| "    \"#{arg}\"" }.join("\n")}
  ];

  mobile.system.type = "android";

  mobile.usb.mode = "#{usb_mode}";

  /* To be changed by the author, though those may or may work with any device. */
  # Google
  mobile.usb.idVendor = "18D1";
  # "Nexus 4"
  mobile.usb.idProduct = "D001";

#{
  if usb_mode == "gadgetfs"
<<EOS
  mobile.usb.gadgetfs.functions = {
    /* The following is a common valid value for rndis. Uncomment it and try it out. */
    #rndis = "gsi.rndis";
  };
EOS
  else "" end
  }
}
EOF
  .gsub(/ +\n/, "\n")
  .gsub(/\n\n+/, "\n\n")
    end
  end
end
